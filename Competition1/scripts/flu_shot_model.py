# -*- coding: utf-8 -*-
"""Competition: Flu Shot Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eZZtXSnmgEv5-Zygj8qH2kami5p7W8-4
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
train_features = pd.read_csv("training_set_features.csv")
train_labels = pd.read_csv("training_set_labels.csv")
test_features = pd.read_csv("test_set_features.csv")

print(train_features.isnull().sum())
print(test_features.isnull().sum())

num_cols = train_features.select_dtypes(include=['float64']).columns

train_features[num_cols] = train_features[num_cols].fillna(train_features[num_cols].median())
test_features[num_cols] = test_features[num_cols].fillna(test_features[num_cols].median())

cat_cols = train_features.select_dtypes(include=['object']).columns

for col in ["income_poverty", "education", "marital_status", "rent_or_own", "employment_status"]:
    train_features[col].fillna(train_features[col].mode()[0], inplace=True)
    test_features[col].fillna(test_features[col].mode()[0], inplace=True)

for col in ["employment_industry", "employment_occupation"]:
    train_features[col].fillna("Unknown", inplace=True)
    test_features[col].fillna("Unknown", inplace=True)

print(train_features.isnull().sum().sum())
print(test_features.isnull().sum().sum())

cat_cols = train_features.select_dtypes(include=['object']).columns

train_features = pd.get_dummies(train_features, columns=cat_cols)
test_features = pd.get_dummies(test_features, columns=cat_cols)

print(train_features.shape, test_features.shape)

print(train_features.shape[1])
print(test_features.shape[1])

missing_cols = set(train_features.columns) - set(test_features.columns) # Columns in train but not in test
extra_cols = set(test_features.columns) - set(train_features.columns) # Columns in test but not in train

for col in missing_cols: # Add missing columns to test set (fill with 0)
    test_features[col] = 0

test_features = test_features.drop(columns=extra_cols) # Remove columns that exist only in test set to ensure feature consistency between train and test
test_features = test_features[train_features.columns] # Align column order with train set
print(train_features.shape, test_features.shape)

# Import function for splitting data into train and validation sets
from sklearn.model_selection import train_test_split

#  Separate features (X) and target labels (y)
X = train_features.drop(columns=['respondent_id']) # Drop respondent_id, as it is not a feature
test_features = test_features.drop(columns=['respondent_id']) # Ensure consistency by removing respondent_id from test set as well

y_h1n1 = train_labels["h1n1_vaccine"]
y_seasonal = train_labels["seasonal_vaccine"]

#train/validation split (80% train, 20% validation)
X_train, X_val, y_h1n1_train, y_h1n1_val = train_test_split(X, y_h1n1, test_size=0.2, random_state=42)
X_train, X_val, y_seasonal_train, y_seasonal_val = train_test_split(X, y_seasonal, test_size=0.2, random_state=42)

train_cols = set(X_train.columns)
test_cols = set(test_features.columns)
print(train_cols - test_cols)
print(test_cols - train_cols)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score

# Create random forest model
model_h1n1 = RandomForestClassifier(n_estimators=100, random_state=42)
model_seasonal = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the models
model_h1n1.fit(X_train, y_h1n1_train)
model_seasonal.fit(X_train, y_seasonal_train)

# Generate predictions for validation set
y_h1n1_pred = model_h1n1.predict_proba(X_val)[:, 1] # Probability of getting the H1N1 vaccine
y_seasonal_pred = model_seasonal.predict_proba(X_val)[:, 1] # Probability of getting the seasonal flu vaccine

# Evaluate model performance using ROC AUC score
h1n1_auc = roc_auc_score(y_h1n1_val, y_h1n1_pred)
seasonal_auc = roc_auc_score(y_seasonal_val, y_seasonal_pred)

print(f"H1N1 Vaccine ROC AUC: {h1n1_auc:.4f}")
print(f"Seasonal Vaccine ROC AUC: {seasonal_auc:.4f}")
print(f"Overall ROC AUC: {(h1n1_auc + seasonal_auc) / 2:.4f}")

# Make predictions on the test dataset using trained models
test_h1n1_pred = model_h1n1.predict_proba(test_features)[:, 1] # H1N1 vaccine probability prediction
test_seasonal_pred = model_seasonal.predict_proba(test_features)[:, 1] # Seasonal flu vaccine probability prediction
print(test_h1n1_pred)
print(test_seasonal_pred)

submission = pd.DataFrame({
    "respondent_id": pd.read_csv("test_set_features.csv")['respondent_id'], # Load 'respondent_id' from the original test_set_features.csv
    "h1n1_vaccine": test_h1n1_pred,
    "seasonal_vaccine": test_seasonal_pred
})

print(submission)

submission.to_csv("submission.csv", index=False) # Save the DataFrame to a CSV file (index=False to avoid adding an extra index column)
from google.colab import files
files.download("submission.csv")









